//백준 1753 최단거리 

#include<iostream>
#include<vector>
#include<queue>
using namespace std;
#define MAX 987654321

vector<vector<pair<int, int> > > map;
vector<int>  distances;
int node, w, startnode;

struct compare {
	bool operator()(pair<int, int> a, pair<int, int> b) {
		return a.first > b.first;
	}
};
void get() {
	cin >> node >> w >> startnode;

	startnode--;
	map.assign(node, vector<pair<int, int> >(0, make_pair(0, 0)));
	distances.assign(node, MAX);
	int a, b, c;
	for (int i = 0;i < w;i++) {
		cin >> a >> b >> c;
		map[a - 1].push_back(make_pair(b - 1, c));

	}
}

void dastra() {
	priority_queue<pair<int,int>,vector<pair<int,int> > ,compare > pq;
	pq.push(make_pair(0,startnode));
	distances[startnode] = 0;
	
	while (!pq.empty()) {
		
		int cur_node = pq.top().second;
		int cost = pq.top().first;

		pq.pop();

		if (distances[cur_node] < cost)continue;

		for (int i = 0;i < map[cur_node].size();i++) {
			int nextnode = map[cur_node][i].first;
			int nextcost = map[cur_node][i].second;
			int checkcost = nextcost + cost;

			if (distances[nextnode] > checkcost) {
				distances[nextnode] = checkcost;
				pq.push(make_pair(checkcost, nextnode));
			}
		}

	}

}
int main() {
	
	ios::sync_with_stdio(false); 
	cin.tie(0);
	get();
	dastra();
	for (int i = 0;i < node;i++) {
		if (distances[i] == MAX)cout << "INF" << "\n";
		else cout << distances[i] << "\n";
	}
}
