//백준 1800 인터넷 설치

#include<iostream>
#include<vector>
#include<queue>
using namespace std;
#define MAX 987654321
int node, edge, k;
int result = -1;
vector<pair<int, int> > v[1003];
vector<int> dist;

void get() {
	cin >> node >> edge >> k;
	for (int i = 0;i < edge;i++) {
		int s, e, w;
		cin >> s >> e >> w;
		v[s - 1].push_back(make_pair(e - 1, w));
		v[e - 1].push_back(make_pair(s - 1, w));
	}

}
bool check(int mid) {
	priority_queue<pair<int, int> > pq;
	dist.assign(node, MAX);
	dist[0] = 0;
	pq.push(make_pair(0, 0));

	while (!pq.empty()) {
		int cost = -pq.top().first;
		int cur_node = pq.top().second;
		pq.pop();
		if (dist[cur_node] < cost)continue; // 만약에 다른 방법으로 온 edge의 cost가 있다면 굳이 연산 해줄 필요 없음
		
		for (int i = 0;i < v[cur_node].size();i++) {
			int next_node = v[cur_node][i].first;
			int next_cost = v[cur_node][i].second;
			int next_final_cost = cost;
			if (next_cost > mid) {
				next_final_cost += 1;
			}
			if (dist[next_node] > next_final_cost) {
				dist[next_node] = next_final_cost;
				pq.push({ -next_final_cost,next_node });
			}

		}
	
		
	}
	return dist[node - 1] <= k;
}
int main() {
	get();
	int right = MAX, left = 0;
	
	while (left <= right) {
		
		int mid = (left + right) / 2;
		
		if (check(mid)) {
			result = mid;
			right = mid - 1;
		}
		else left = mid + 1;
	}
	cout << result;
}
