import java.io.BufferedReader
import java.io.InputStreamReader
import java.util.*

data class Node(
    val start : Int,
    val end : Int,
    val weight : Int
):Comparable<Node>{
    override fun compareTo(other: Node): Int = this.weight - other.weight
}
fun main() = with (BufferedReader(InputStreamReader(System.`in`))) {
    val br = StringTokenizer(this.readLine())
    val v = br.nextToken().toInt()
    val e = br.nextToken().toInt()
    val vst = Array(v+1){0}
    var sum = 1
    var answer = 0
    var nodeInfo = Array(v+1){PriorityQueue<Node>()}

    for( i in 0 until e){

        val st = StringTokenizer(this.readLine())
        val start = st.nextToken().toInt()
        val end = st.nextToken().toInt()
        val weight = st.nextToken().toInt()
        nodeInfo[start].add(Node(start,end,weight))
        nodeInfo[end].add(Node(end,start,weight))
    }
    val check = PriorityQueue<Node>()
    vst[1] = 1
    while(nodeInfo[1].isNotEmpty()){check.add(nodeInfo[1].poll())}
    while(sum < v){
        val node = check.poll()
        if(vst[node.end] ==1)continue
        //println("$node $sum")
        vst[node.end] = 1
        answer += node.weight
        sum +=1
        nodeInfo[node.end].forEach {
            if(vst[it.end] == 1) return@forEach
            check.add(it)
        }
    }

    print(answer)

}


