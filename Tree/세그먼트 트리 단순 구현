/*
  세그먼트 트리는 구간 합에 최적화된 트리이다.
  기본적으로 구간 합을 구할 때는 O(n) ~O(n*n) ~ 그이상의 시간 복잡도를 가질 수 있지만
  세그먼트 트리는 O(logn)으로 구간 합 탐색 속도를 줄여주기 때문에 이해대해 알고 있어야 한다고 생각했다.
  
  처음에는 한번 구현만 해보았다.
  좀 더 공부를 해보고 문제를 풀 생각이다.
*/

#include<iostream>
#include<vector>
using namespace std;


int init_stree(vector<int>& stree, vector<int>& data, int node, int begin, int end) {
	if (begin == end) {
		return data[begin];
	}
	int mid = (begin + end) / 2;
	return init_stree(stree,data,node*2,begin,end) + init_stree(stree, data, node * 2 + 1, mid + 1, end);
}

int sum_stree(vector<int>& stree, int node, int begin, int end, const int left, const int right) {
	if (right < begin || end < left) {
		return 0;
	}
	else if (left <= begin && end <= right) {
		return stree[node];
	}
	else {
		int mid = (begin + end) / 2;
		return sum_stree(stree, node * 2, begin, mid, left, right) + sum_stree(stree, node * 2 + 1, mid + 1, end, left, right);
	}
}

void update_stree(vector<int>& stree, int node, const int index, const int diff, int begin, int end) {
	if (!(begin <= index && index <= end)) {
		return;
	}
	stree[node] += diff;
	if (begin != end) {
		int mid = (begin + end) / 2;
		update_stree(stree, node * 2, index, diff, begin, mid);
		update_stree(stree, node * 2 + 1, index, diff, mid + 1, end);
	}

}
