#include<iostream>
#include<vector>
#include<queue>

using namespace std;

int n, m, carfuel;
int fcount = 0;
int carx, cary;
class customer {
public:
	int destx;
	int desty;
	int distance;
	int startx;
	int starty;
};
class qinfo {
public:
	int x;
	int y;
	int dis;
};
vector<vector<int> > vst;
vector<vector<int> > map;
vector<customer> customerarr;
int dx[4] = { 0,0,1,-1 };
int dy[4] = { -1,1,0,0 };
bool flag = false;
void get() {
	cin >> n >> m >> carfuel;
	map.assign(n, vector<int>(n, 0));
	vst.assign(n, vector<int>(n, 0));

	for (int i = 0;i < n;i++) {
		for (int j = 0;j < n;j++) {
			cin >> map[i][j];
		}
	}
	
	cin >> carx >> cary;
	carx -= 1;
	cary -= 1;
	
	
	customer p;
	
	p.distance = 0;
	int cnt = 2;
	for (int i = 0;i < m;i++) {
		int a, b, c, d;
		cin >> a >> b >> c >> d;
		p.startx = a - 1;
		p.starty = b - 1;
		p.destx = c - 1;
		p.desty = d - 1;
		map[p.startx][p.starty] = cnt;
		cnt++;
		customerarr.push_back(p);
	}
}
void initvst() {
	for (int i = 0;i < n;i++) {
		for (int j = 0;j < n;j++) {
			vst[i][j] = 0;
		}
	}
}
void print() {
	for (int i = 0;i < n;i++) {
		for (int j = 0;j < n;j++) {
			cout << map[i][j] << " ";
		}cout << endl;
	}
	cout << customerarr.size();
}

void destcustomer(int idx) {
	int desx = customerarr[idx].destx;
	int desy = customerarr[idx].desty;
	int finaldis = -1;
	qinfo a;
	a.x = carx;
	a.y = cary;
	a.dis = 0;
	queue<qinfo> q;
	q.push(a);
	vst[carx][cary] = 1;

	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int dis = q.front().dis;

		q.pop();
		//cout << x << " " << y << " " << "check "<<endl;
		if (customerarr[idx].destx == x && customerarr[idx].desty == y) {
			finaldis = dis;
			break;
		}

		for (int i = 0;i < 4;i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx < 0 || ny >= n || nx >= n || ny < 0)continue;

			if (map[nx][ny] == 1 || vst[nx][ny] == 1)continue;

			vst[nx][ny] = 1;
			qinfo b;
			b.x = nx;
			b.y = ny;
			b.dis = dis + 1;
			q.push(b);
		}
	}
	initvst();
	
	if (finaldis == -1) {
		flag = true;
		return;
	}

	if (carfuel - finaldis < 0) {
		flag = true;
		return;
	}

	carx = desx;
	cary = desy;

	carfuel -= finaldis;
	carfuel += 2 * finaldis;
}
void findcustomer() {
	//iniatalize queue
	queue<qinfo> q;
	qinfo a;
	a.x = carx;
	a.y = cary;
	a.dis = 0;
	q.push(a);

	int finaldis = 10000000;
	int idx = -1;
	if (map[carx][cary] >= 2) {

		finaldis = 0;
		idx = map[carx][cary] - 2;
		q.pop();
	}
	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int dis = q.front().dis;
		q.pop();

		if (dis > finaldis)continue;

		
		//택시 자리에 손님 있을때

		vst[x][y] = 1;
		for (int i = 0;i < 4;i++) {
			int nx = x + dx[i], ny = y + dy[i];
			if (nx < 0 || nx >= n || ny < 0 || ny >= n)continue;
			
			if (map[nx][ny] == 1 || vst[nx][ny] == 1)continue;
		
			vst[nx][ny] = 1;
			
			if (map[nx][ny] >= 2) {
				if (finaldis > dis+1) {
					finaldis = dis+1;
					idx = map[nx][ny]-2;
				}
				else if (finaldis == dis+1) {
					int checkidx = map[nx][ny]-2;
					if (customerarr[idx].startx > customerarr[checkidx].startx) {
						idx = checkidx;
					}
					else if (customerarr[idx].startx == customerarr[checkidx].startx) {
						if (customerarr[idx].starty > customerarr[checkidx].starty) {
							idx = checkidx;
						}
					}
				}
			}
			//사람 있으면 검사
			qinfo b;
			b.x = nx;
			b.y = ny;
			b.dis = dis + 1;
			q.push(b);
		}
	}


	if (idx == -1) {
	
		flag = true;
		return;
	}
	carfuel -= finaldis;
	
	if (carfuel < 0) {

		flag = true;
		return;
	}

	carx = customerarr[idx].startx;
	cary = customerarr[idx].starty;
	initvst();
	destcustomer(idx);

	if (!flag)fcount++;

	map[customerarr[idx].startx][customerarr[idx].starty] = 0;
}

int main() {
	get();
	while (1) {
	
		if (fcount == m) {
			break;
		}
		findcustomer();
		if (flag) {
			break;
		}
	}

	if (flag || fcount != m) { 
		cout << -1; 
		//cout << flag << " " << fcount;
	}
	else {
		cout << carfuel;
	}

}

//수정 후

계속 틀렸었는데 
하나하나 조금 조건을 세분화 하여 처리 하는 습관이 필요하다.
