#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int n, k;
vector<int> belt;
vector<int> robot;
queue<int> idxro;
int counts = 0;
void get() {
	cin >> n >> k;
	belt.assign(2 * n, 0);
	robot.assign(2 * n, 0);
	for (int i = 0;i < 2*n;i++) {
		cin >> belt[i];
	}
}
void print() {
	for (int i = 0;i < 2 * n;i++)cout << belt[i] << " ";
	cout << endl << "A";
	for (int i = 0;i < 2 * n;i++)cout << robot[i] << " ";
	cout << endl;
}
bool checkcount() {
	int cnt = 0;
	for (int i = 0;i < 2 * n;i++) {
		if (belt[i] == 0)cnt++;
	}
	if (cnt >= k)return true;
	return false;
}
//벨트 이동
void movebelt() {
	vector<int> checkb(2 * n, 0);
	
	for (int i = 1;i < 2 * n;i++) {
		checkb[i] = belt[i-1];
	}
	checkb[0] = belt[2 * n - 1];

	for (int i = 0;i < 2 * n;i++) {
		belt[i] = checkb[i];
	}
	queue<int> checkq;
	while (!idxro.empty()) {
		int idx = idxro.front();
		robot[idx] = 0;
		int next = idx + 1;
		idxro.pop();
		if (next == n - 1) {
			continue;
		}
		checkq.push(next);
	}
	while (!checkq.empty()) {
		idxro.push(checkq.front());
		robot[checkq.front()] = 1;
		checkq.pop();
	}
}
void moverobot() {
	queue<int> checkq;

	while (!idxro.empty()) {
		int idx = idxro.front();
		idxro.pop();
		int next = idx + 1;
		
		if (next >= n) { 
			robot[idx] = 0;
			continue; 
		}
		if (robot[next] == 0 && belt[next] > 0) {
			robot[idx] = 0;
			robot[next] = 1;
			belt[next]--;
			checkq.push(next);
		}
		else {
			checkq.push(idx);
		}

	}
	while (!checkq.empty()) {
		idxro.push(checkq.front());
		checkq.pop();
	}
	
}
void getrobot() {
	if (robot[0] == 0 && belt[0] > 0) {
		belt[0]--;
		robot[0] = 1;
		idxro.push(0);
	}
}

int main() {
	get();
	int che = 0;
	while (1) {
		//print();
		//che++;
		
		//if (che == 32)break;

		if (checkcount())break;
		counts++;
		movebelt();
		moverobot();
		getrobot();
	}
	cout << counts;
}

//기본적으로 문제가 너무 이해 안되게 적어 두었다.
//dequeue써서 다시 한번 풀어봐야 겠다
